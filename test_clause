from Literal import Literal

def test_clause_init():
    # testing the clause constructor
    a = Literal('a')
    b = Literal('b')
    c = Literal('c')
    cl = Clause(a, b, c)
    arr = [a, b, c]
    for i in range(len(cl)): # also checks __len__ and __getitem__ methods
        assert arr[i] == cl[i]
    assert cl.get_status() == None # also partially tests get_status and set_status (used in get_status)
    a2 = Literal('a')
    a2.NOT()
    with pytest.raises(AttributeError):
        Clause(a, b, c, a2)
    cl2 = Clause(a, b, b)
    arr2 = [a, b]
    for i in range(len(cl2)):
        assert cl2[i] == arr2[i]

def test_clause_status():
    a = Literal('a')
    b = Literal('b')
    c = Literal('c')
    cl = Clause(a, b, c)
    assert cl.get_status() == None
    a.set_status()
    assert cl.get_status()
    a.NOT()
    assert cl.get_status() == None
    b.set_status(False)
    c.set_status(False)
    assert not cl.get_status()
    b.NOT()
    assert cl.get_status()
    d = Literal('d')
    cl.ADD(d) # also tests adding a literal to a clause
    d.set_status()
    assert cl.get_status()
    d.NOT()
    b.NOT()
    assert not cl.get_status()

def test_clause_add():
    """Test clause ADD method functionalities"""
    a = Literal('a')
    b = Literal('b')
    c = Literal('c')
    d = Literal('d')
    e = Literal('e')
    cl1 = Clause(a, b)
    cl2 = Clause(c, d)
    a.set_status(False)
    b.set_status(False)
    arr = [a, b]
    # test initializations:
    for i in range(len(cl1)):
        assert cl1[i] == arr[i]
    assert not cl1.get_status()
    # test adding a Clause with multiple Literals:
    arr.append(c)
    arr.append(d)
    cl1.ADD(cl2)
    for i in range(len(cl1)):
        assert cl1[i] == arr[i]
    assert cl1.get_status() is None
    e.set_status()
    arr.append(e)
    # test adding an individual Literal
    cl1.ADD(e)
    for i in range(len(cl1)):
        assert cl1[i] == arr[i]
    assert cl1.get_status()
    e.NOT()
    assert not cl1.get_status()
    # test duplicates filter
    e2 = Literal('e')
    e2.NOT()
    assert isinstance(e2, Literal)
    cl1.ADD(e2)
    for i in range(len(cl1)):
        assert cl1[i] == arr[i]
    cl4 = Clause(a, b)
    cl1.ADD(cl4)
    for i in range(len(cl1)):
        assert cl1[i] == arr[i]
    cl3 = Clause()
    with pytest.raises(AttributeError):
        cl1.ADD(cl3)
    a2 = Literal('a')
    a2.NOT()
    # test contradiction check
    with pytest.raises(AttributeError):
        cl1.ADD(a2)
    with pytest.raises(AttributeError):
        cl1.ADD(Clause(a2))
    # test adding a negated Clause
    cl3 = Clause(Literal('f'), Literal('g')).NOT()
    with pytest.raises(TypeError):
        cl1.ADD(cl3)
    
def test_clause_remove():
    a = Literal('a')
    b = Literal('b')
    c = Literal('c')
    cl = Clause(a, b, c)
    arr = [a, c]
    cl.remove(b)
    for i in range(len(cl)):
        assert cl[i] == arr[i]
    cl.remove(a)
    cl.remove(c)
    assert cl.is_empty()

def test_clause_not():
    a = Literal('a')
    b = Literal('b')
    b.NOT()
    cl = Clause(a, b)
    cl_negated = cl.NOT()
    for lit in cl_negated:
        if lit.get_variable() == 'a':
            assert lit.get_sign() == 'neg'
        elif lit.get_variable() == 'b':
            assert lit.get_sign() == 'pos'
    assert isinstance(cl_negated, set)

